---
# tasks file for roles/hpl

- name: Install MPI, ATLAS and required dependencies
  apt:
    pkg:
    - automake
    - gfortran
    - git
    state: latest

- name: Install MPI, ATLAS and required dependencies
  apt:
    pkg:
    - libatlas-base-dev
    state: latest
  tags:
    - atlas-repo

- name: Setup overclocking - cpu over_voltage
  lineinfile:
    path: /boot/config.txt
    regexp: "^over_voltage="
    line: "arm_freq={{ cpu_voltage }}"
  tags:
  - overclock

- name: Setup overclocking - cpu frequency
  lineinfile:
    path: /boot/config.txt
    regexp: "^arm_freq="
    line: "arm_freq={{ cpu_frequency }}"
  tags:
  - overclock

- name: Reboot to enable new clock speed
  reboot:
  tags:
  - overclock

- name: Get clock speed
  command: vcgencmd measure_clock arm
  register: clock_speed
  tags:
  - overclock

- name: Show clock speed
  debug:
    msg: "Clock speed {{ clock_speed.stdout }}"
  tags:
  - overclock

- name: Disable CPU throttling - lasts until reboot, so needs to be after setting clock speed
  shell: "echo performance | sudo tee /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor"

# Using the repo MPI libs resulted in segmentation faults when running HPL.
# So building MPI from source.
- name: Make a working directly for MPI
  file:
    name: "{{ mpi_working_dir }}"
    state: directory
    mode: '0755'
    owner: pi
    group: pi
  tags:
  - mpi

- name: Get MPI source code
  get_url:
    url: "{{ mpi_download_url }}/{{ mpi_file_version }}/mpich-{{ mpi_file_version }}{{ mpi_file_extension }}"
    dest: "{{ mpi_working_dir }}"
  tags:
  - mpi

- name: Untar MPI file
  unarchive:
    src: "{{ mpi_working_dir }}/mpich-{{ mpi_file_version }}{{ mpi_file_extension }}"
    dest: "{{ mpi_working_dir }}"
    remote_src: yes
  become_user: pi
  tags:
  - mpi

- name: Setup for MPI make
  command: "./configure --with-device={{ mpi_device }}"
  args:
    chdir: "{{ mpi_working_dir }}/mpich-{{ mpi_file_version }}"
  become_user: pi
  async: 1200
  poll: 60
  tags:
  - mpi

- name: Make MPI
  make:
    chdir: "{{ mpi_working_dir }}/mpich-{{ mpi_file_version }}"
    params:
      NUM_THREADS: 4
  become_user: pi
  async: 7200
  poll: 60
  tags:
  - mpi

- name: Make install MPI
  make:
    chdir: "{{ mpi_working_dir }}/mpich-{{ mpi_file_version }}"
    target: install
  async: 3600
  poll: 60
  tags:
  - mpi

# The repo ATLAS works ok. If not working, or not performant, then build once, store centrally, 
# and pull from a store e.g. github or a file/object store.
- name: Get ATLAS pre-built - make directory for ATLAS
  file:
    name: "{{ atlas_working_dir }}"
    state: directory
    mode: '0755'
    owner: pi
    group: pi
  tags:
    - atlas-build

- name: Make NFS mount point for ATLAS pre-built
  file:
    path: "{{ atlas_store_nfs_dir }}"
    state: directory
    mode: '0775'
  tags:
    - atlas-build

- name: Mount NFS where pre-built ATLAS is stored
  mount:
    path: "{{ atlas_store_nfs_dir }}"
    src: "{{ diskstation_ip }}:/volume1/rpi-nfs/"
    fstype: nfs
    state: mounted
  tags:
    - atlas-build

- name: Copy ATLAS pre-built from NFS store
  copy:
    src: "{{ atlas_store_nfs_dir }}/tmp_atlas/"
    dest: "/home/pi/tmp_atlas"
    remote_src: yes
  become_user: pi
  tags:
    - atlas-build

- name: Make a working directory for HPL
  file:
    name: "{{ hpl_working_dir }}"
    state: directory
    mode: '0755'
    owner: pi
    group: pi
  tags:
  - hpl

- name: Get HPL source code
  get_url:
    url: "{{ hpl_download_url }}{{ hpl_file_version }}{{ hpl_file_extension }}"
    dest: "{{ hpl_working_dir }}"
  tags:
  - hpl

- name: Untar hpl file
  unarchive:
    src: "{{ hpl_working_dir }}/{{ hpl_file_version }}{{ hpl_file_extension }}"
    dest: "{{ hpl_working_dir }}"
    remote_src: yes
  become_user: pi
  tags:
  - hpl

- name: Setup for HPL make
  command: "sh make_generic"
  args:
    chdir: "{{ hpl_working_dir }}/{{ hpl_file_version }}/setup"
  become_user: pi
  tags:
  - hpl

- name: Copy in Make.rpi - ATLAS from repo
  template:
    src: templates/Make.rpi.atlas-repo.j2
    dest: "{{ hpl_working_dir }}/{{ hpl_file_version }}/Make.rpi"
  become_user: pi
  tags:
  - hpl
  - atlas-repo

- name: Copy in Make.rpi - ATLAS built from source
  template:
    src: templates/Make.rpi.atlas-build.j2
    dest: "{{ hpl_working_dir }}/{{ hpl_file_version }}/Make.rpi"
  become_user: pi
  tags:
  - hpl
  - atlas-build

- name: Make HPL
  make:
    chdir: "{{ hpl_working_dir }}/{{ hpl_file_version }}"
    params:
      arch: rpi
  become_user: pi
  async: 7200
  poll: 60
  tags:
  - hpl

- name: Add all nodes in cluster to trusted hosts
  shell: "ssh-keyscan -H {{ item }} >> ~/.ssh/known_hosts"
  with_inventory_hostnames:
    - current
  become_user: pi
  tags:
  - ssh

- name: Generate a new ssh key pair on each node
  openssh_keypair:
    path: /home/pi/.ssh/id_rsa
  become_user: pi
  tags:
  - ssh

- name: Fetch the keyfile from the node to master
  fetch: 
    src: "/home/pi/.ssh/id_rsa.pub"
    dest: "group_vars/{{inventory_hostname}}-id_rsa.pub"
    flat: yes
  tags:
  - ssh

- name: Copy the key add to authorized_keys using Ansible module
  authorized_key:
    user: pi
    state: present
    key: "{{ lookup('file','group_vars/{{item}}-id_rsa.pub')}}"
  when: "{{ item != inventory_hostname }}"
  with_items: 
    - "{{ groups['current'] }}"
  tags:
  - ssh

- name: Delete pub files from local
  file:
    path: "{{ item }}"
    state: absent
  with_fileglob:
    - group_vars/*.pub
  delegate_to: localhost
  tags:
  - ssh

- name: Backup original HPL.data
  copy:
    src: "{{ hpl_working_dir }}/{{ hpl_file_version }}/bin/rpi/HPL.dat"
    dest: "{{ hpl_working_dir }}/{{ hpl_file_version }}/bin/rpi/HPL.dat.ori"
    remote_src: yes
  become_user: pi
  tags:
  - hpl

- name: Add HPL.dat as a new copy
  template:
    src: templates/HPL.dat.j2
    dest: "{{ hpl_working_dir }}/{{ hpl_file_version }}/bin/rpi/HPL.dat.new"
  become_user: pi
  tags:
  - hpl

- name: Add 3 node baseline HPL.dat as a new copy
  template:
    src: templates/HPL.dat.baseline.j2
    dest: "{{ hpl_working_dir }}/{{ hpl_file_version }}/bin/rpi/HPL.dat.baseline"
  become_user: pi
  tags:
  - hpl

- name: Add nodes-Xpi
  vars:
    node_list: "{{ groups['current'] }}"
  template:
    src: templates/nodes-Xpi.j2
    dest: "{{ hpl_working_dir }}/{{ hpl_file_version }}/bin/rpi/nodes-Xpi"
  become_user: pi
  tags:
  - hpl
  - dat

- debug:
    msg: "To test 1 nodes cd {{ hpl_working_dir }}/{{ hpl_file_version }}/bin/rpi/; mpirun -np 4 ./xhpl"

- debug:
    msg: "To run 4 nodes: cd {{ hpl_working_dir }}/{{ hpl_file_version }}/bin/rpi/; mpiexec -f nodes-Xpi ./xhpl"

- debug:
    msg: "If reboot/shutdown, then need to repeat disable CPU throttle"
