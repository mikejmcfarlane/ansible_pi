---
# tasks file for roles/hpl

- name: INSTALL - Install MPI, ATLAS and required dependencies
  apt:
    pkg:
    - automake
    - gfortran
    - git
    state: latest

- name: ATLAS REPO - Install MPI, ATLAS and required dependencies
  apt:
    pkg:
    - libatlas-base-dev
    state: latest
  tags:
    - atlas-repo

- name: OVERCLOCK - Setup overclocking - cpu over_voltage
  lineinfile:
    path: /boot/config.txt
    regexp: "^over_voltage="
    line: "over_voltage={{ cpu_voltage }}"
  tags:
  - overclock

- name: OVERCLOCK - Setup overclocking - cpu frequency
  lineinfile:
    path: /boot/config.txt
    regexp: "^arm_freq="
    line: "arm_freq={{ cpu_frequency }}"
  tags:
  - overclock

- name: OVERCLOCK - Reboot to enable new clock speed
  reboot:
  tags:
  - overclock

- name: OVERCLOCK - Get clock speed
  command: vcgencmd measure_clock arm
  register: clock_speed
  tags:
  - overclock

- name: OVERCLOCK - Show clock speed
  debug:
    msg: "Clock speed {{ clock_speed.stdout }}"
  tags:
  - overclock

- name: CPU THROTTLING - Disable CPU throttling - lasts until reboot, so needs to be after setting clock speed
  shell: "echo performance | sudo tee /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor"

# Using the repo MPI libs resulted in segmentation faults when running HPL.
# So building MPI from source.
- name: MPI - Make a working directly for MPI
  file:
    name: "{{ mpi_working_dir }}"
    state: directory
    mode: '0755'
    owner: pi
    group: pi
  tags:
  - mpi

- name: MPI - Get MPI source code
  get_url:
    url: "{{ mpi_download_url }}/{{ mpi_file_version }}/mpich-{{ mpi_file_version }}{{ mpi_file_extension }}"
    dest: "{{ mpi_working_dir }}"
  tags:
  - mpi

- name: MPI - Untar MPI file
  unarchive:
    src: "{{ mpi_working_dir }}/mpich-{{ mpi_file_version }}{{ mpi_file_extension }}"
    dest: "{{ mpi_working_dir }}"
    remote_src: yes
  become_user: pi
  tags:
  - mpi

- name: MPI - Setup for MPI make
  command: "./configure --with-device={{ mpi_device }}"
  args:
    chdir: "{{ mpi_working_dir }}/mpich-{{ mpi_file_version }}"
  become_user: pi
  async: 1200
  poll: 60
  tags:
  - mpi

- name: MPI - Make MPI
  make:
    chdir: "{{ mpi_working_dir }}/mpich-{{ mpi_file_version }}"
    params:
      NUM_THREADS: 4
  become_user: pi
  async: 7200
  poll: 60
  tags:
  - mpi

- name: MPI - Make install MPI
  make:
    chdir: "{{ mpi_working_dir }}/mpich-{{ mpi_file_version }}"
    target: install
  async: 3600
  poll: 60
  tags:
  - mpi

# The repo ATLAS works ok. If not working, or not performant, then build once, store centrally, 
# and pull from a store e.g. github or a file/object store.
# - name: ATLAS BUILD - Get ATLAS pre-built - make directory for ATLAS
#   file:
#     name: "{{ atlas_working_dir }}"
#     state: directory
#     mode: '0755'
#     owner: pi
#     group: pi
#   tags:
#     - atlas-build
# 
# - name: ATLAS BUILD - Make NFS mount point for ATLAS pre-built
#   file:
#     path: "{{ atlas_store_nfs_dir }}"
#     state: directory
#     mode: '0775'
#   tags:
#     - nfs
# 
# - name: ATLAS BUILD - Mount NFS where pre-built ATLAS is stored
#   mount:
#     path: "{{ atlas_store_nfs_dir }}"
#     src: "{{ diskstation_ip }}:/volume1/rpi-nfs/"
#     fstype: nfs
#     state: mounted
#   tags:
#     - nfs
# 
# - name: ATLAS BUILD - Copy ATLAS pre-built from NFS store
#   copy:
#     src: "{{ atlas_store_nfs_dir }}/tmp_atlas/"
#     dest: "/home/pi/tmp_atlas"
#     remote_src: yes
#   become_user: pi
#   tags:
#     - atlas-build
# 
- name: OPENBLAS - Make a working directory for OpenBLAS
  file:
    name: "{{ openblas_working_dir }}"
    state: directory
    mode: '0755'
    owner: pi
    group: pi
  tags:
  - openblas

- name: OPENBLAS - Get OpenBLAS source code
  git:
    repo: "{{ openblas_repo }}"
    dest: "{{ openblas_working_dir }}"
  become_user: pi
  tags:
  - openblas

- name: OPENBLAS - Make OpenBLAS
  make:
    chdir: "{{ openblas_working_dir }}"
    params:
      FC: gfortran
  become_user: pi
  async: 7200
  poll: 60
  tags:
  - openblas

- name: OPENBLAS - Make install OpenBLAS
  make:
    chdir: "{{ openblas_working_dir }}"
    params:
      PREFIX: "{{ openblas_install_dir }}"
    target: install
  async: 3600
  poll: 60
  tags:
  - openblas

- name: HPL - Make a working directory for HPL
  file:
    name: "{{ hpl_working_dir }}"
    state: directory
    mode: '0755'
    owner: pi
    group: pi
  tags:
  - hpl

- name: HPL - Get HPL source code
  get_url:
    url: "{{ hpl_download_url }}{{ hpl_file_version }}{{ hpl_file_extension }}"
    dest: "{{ hpl_working_dir }}"
  tags:
  - hpl

- name: HPL - Untar hpl file
  unarchive:
    src: "{{ hpl_working_dir }}/{{ hpl_file_version }}{{ hpl_file_extension }}"
    dest: "{{ hpl_working_dir }}"
    remote_src: yes
  become_user: pi
  tags:
  - hpl

- name: HPL - Setup for HPL make
  command: "sh make_generic"
  args:
    chdir: "{{ hpl_working_dir }}/{{ hpl_file_version }}/setup"
  become_user: pi
  tags:
  - hpl

- name: HPL - Copy in Make.rpi - ATLAS from repo
  template:
    src: templates/Make.rpi.atlas-repo.j2
    dest: "{{ hpl_working_dir }}/{{ hpl_file_version }}/Make.rpi"
  become_user: pi
  tags:
  - hpl
  - atlas-repo

- name: HPL - Copy in Make.rpi - ATLAS built from source
  template:
    src: templates/Make.rpi.atlas-build.j2
    dest: "{{ hpl_working_dir }}/{{ hpl_file_version }}/Make.rpi"
  become_user: pi
  tags:
  - hpl
  - atlas-build

- name: HPL - Copy in Make.rpi - OpenBLAS from source
  template:
    src: templates/Make.rpi.openblas.j2
    dest: "{{ hpl_working_dir }}/{{ hpl_file_version }}/Make.rpi"
  become_user: pi
  tags:
  - hpl
  - openblas

- name: HPL - Make HPL
  make:
    chdir: "{{ hpl_working_dir }}/{{ hpl_file_version }}"
    params:
      arch: rpi
  become_user: pi
  async: 7200
  poll: 60
  tags:
  - hpl

- name: KEYS - Add all nodes in cluster to trusted hosts
  shell: "ssh-keyscan -H {{ item }} >> ~/.ssh/known_hosts"
  with_inventory_hostnames:
    - current
  become_user: pi
  tags:
  - ssh

- name: KEYS - Generate a new ssh key pair on each node
  openssh_keypair:
    path: /home/pi/.ssh/id_rsa
  become_user: pi
  tags:
  - ssh

- name: KEYS - Fetch the keyfile from the node to master
  fetch: 
    src: "/home/pi/.ssh/id_rsa.pub"
    dest: "group_vars/{{inventory_hostname}}-id_rsa.pub"
    flat: yes
  tags:
  - ssh

- name: KEYS - Copy the key add to authorized_keys using Ansible module
  authorized_key:
    user: pi
    state: present
    key: "{{ lookup('file','group_vars/{{item}}-id_rsa.pub')}}"
  when: "{{ item != inventory_hostname }}"
  with_items: 
    - "{{ groups['current'] }}"
  tags:
  - ssh

- name: KEYS - Delete pub files from local
  file:
    path: "{{ item }}"
    state: absent
  with_fileglob:
    - group_vars/*.pub
  delegate_to: localhost
  tags:
  - ssh

- name: HPL - Backup original HPL.data
  copy:
    src: "{{ hpl_working_dir }}/{{ hpl_file_version }}/bin/rpi/HPL.dat"
    dest: "{{ hpl_working_dir }}/{{ hpl_file_version }}/bin/rpi/HPL.dat.ori"
    remote_src: yes
  become_user: pi
  tags:
  - hpl

- name: HPL - Add 1 node HPL.dat as a new copy
  template:
    src: templates/HPL.dat.1node.j2
    dest: "{{ hpl_working_dir }}/{{ hpl_file_version }}/bin/rpi/HPL.dat.1node"
  become_user: pi
  tags:
  - hpl

- name: HPL - Add 4 node HPL.dat
  template:
    src: templates/HPL.dat.4node.j2
    dest: "{{ hpl_working_dir }}/{{ hpl_file_version }}/bin/rpi/HPL.dat.4node"
  become_user: pi
  tags:
  - hpl

- name: HPL - Add script to run and log test on a single node
  template:
    src: templates/run_log_test_1node.sh.j2
    dest: "{{ hpl_working_dir }}/{{ hpl_file_version }}/bin/rpi/run_log_test_1node.sh"
    mode: '0744'
  become_user: pi
  tags:
  - hpl

- name: HPL - Add script to run and log test on 4 nodes
  template:
    src: templates/run_log_test_4node.sh.j2
    dest: "{{ hpl_working_dir }}/{{ hpl_file_version }}/bin/rpi/run_log_test_4node.sh"
    mode: '0744'
  become_user: pi
  tags:
  - hpl

- name: HPL - Add nodes-Xpi
  vars:
    node_list: "{{ groups['current'] }}"
  template:
    src: templates/nodes-Xpi.j2
    dest: "{{ hpl_working_dir }}/{{ hpl_file_version }}/bin/rpi/nodes-Xpi"
  become_user: pi
  tags:
  - hpl
  - dat

- debug:
    msg: "To test 1 nodes cd {{ hpl_working_dir }}/{{ hpl_file_version }}/bin/rpi/; ./run_log_test_1node.sh"

- debug:
    msg: "To run 4 nodes: cd {{ hpl_working_dir }}/{{ hpl_file_version }}/bin/rpi/; ./run_log_test_4node.sh"

- debug:
    msg: "If reboot/shutdown, then need to repeat disable CPU throttle"
